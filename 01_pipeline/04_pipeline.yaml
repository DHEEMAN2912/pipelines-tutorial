# apiVersion: tekton.dev/v1
# kind: Pipeline
# metadata:
#   name: build-and-deploy
# spec:
#   workspaces:
#   - name: shared-workspace
#   params:
#   - name: deployment-name
#     type: string
#     description: name of the deployment to be patched
#   - name: git-url
#     type: string
#     description: url of the git repo for the code of deployment
#   - name: git-revision
#     type: string
#     description: revision to be used from repo of the code for deployment
#     default: master
#   - name: IMAGE
#     type: string
#     description: image to be build from the code
#   tasks:
#   - name: fetch-repository
#     taskRef:
#       name: git-clone
#       kind: ClusterTask
#     workspaces:
#     - name: output
#       workspace: shared-workspace
#     params:
#     - name: url
#       value: $(params.git-url)
#     - name: subdirectory
#       value: ""
#     - name: deleteExisting
#       value: "true"
#     - name: revision
#       value: $(params.git-revision)
#   - name: build-image
#     taskRef:
#       name: buildah
#       kind: ClusterTask
#     params:
#     - name: IMAGE
#       value: $(params.IMAGE)
#     workspaces:
#     - name: source
#       workspace: shared-workspace
#     runAfter:
#     - fetch-repository
#   - name: scan-image
#     taskRef:
#       name: trivy-scan
#       kind: ClusterTask
#     params:
#     - name: IMAGE
#       value: $(params.IMAGE)
#     runAfter:
#     - build-image
#   - name: apply-manifests
#     taskRef:
#       name: apply-manifests
#     workspaces:
#     - name: source
#       workspace: shared-workspace
#     runAfter:
#     - build-image
#   - name: update-deployment
#     taskRef:
#       name: update-deployment
#     params:
#     - name: deployment
#       value: $(params.deployment-name)
#     - name: IMAGE
#       value: $(params.IMAGE)
#     runAfter:
#     - apply-manifests



apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: build-and-deploy
spec:
  workspaces:
    - name: shared-workspace
  params:
    - name: deployment-name
      type: string
      description: Name of the deployment to be patched
    - name: git-url
      type: string
      description: URL of the Git repository for the code of deployment
    - name: git-revision
      type: string
      description: Revision to be used from the repo of the code for deployment
      default: main
    - name: IMAGE
      type: string
      description: Image to be built from the code
  tasks:
    - name: fetch-repository
      taskRef:
        name: git-clone
        kind: ClusterTask
      workspaces:
        - name: output
          workspace: shared-workspace
      params:
        - name: url
          value: $(params.git-url)
        - name: subdirectory
          value: ""
        - name: deleteExisting
          value: "true"
        - name: revision
          value: $(params.git-revision)
    
    - name: sonar-scanning
      taskSpec:
        params:
          - name: SONARQUBE_URL
            type: string
          - name: SONARQUBE_TOKEN
            type: string
        steps:
          - name: sonar-scanner
            image: sonarsource/sonar-scanner-cli:latest
            env:
              - name: SONAR_HOST_URL
                value: "http://172.203.224.21:9002/"
              - name: SONAR_TOKEN
                value: "sqp_b77a634dd254573b9349c5dd8d4af686c6bfe5a6"
            script: |
              #!/bin/sh
              git clone --branch $(params.git-revision) $(params.git-url)
              ls
              sonar-scanner -Dsonar.projectKey=pipelines-vote-ui -Dsonar.sources=./ -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN
      params:
        - name: SONARQUBE_URL
          value: "http://172.203.224.21:9002/"
        - name: SONARQUBE_TOKEN
          value: "sqp_b77a634dd254573b9349c5dd8d4af686c6bfe5a6"
      runAfter:
        - fetch-repository
    
    - name: build-image
      taskRef:
        name: buildah
        kind: ClusterTask
      params:
        - name: IMAGE
          value: $(params.IMAGE)
      workspaces:
        - name: source
          workspace: shared-workspace
      runAfter:
        - sonar-scanning
    
    - name: scan-image
      taskSpec:
        params:
          - name: IMAGE
            type: string
        steps:
          - name: trivy
            image: aquasec/trivy:latest
            env:
              - name: TRIVY_INSECURE
                value: "true"
            script: |
              #!/bin/sh
              trivy image --no-progress $(params.IMAGE)
      params:
        - name: IMAGE
          value: $(params.IMAGE)
      runAfter:
        - build-image
    
    - name: apply-manifests
      taskRef:
        name: apply-manifests
      workspaces:
        - name: source
          workspace: shared-workspace
      runAfter:
        - scan-image
    
    - name: update-deployment
      taskRef:
        name: update-deployment
      params:
        - name: deployment
          value: $(params.deployment-name)
        - name: IMAGE
          value: $(params.IMAGE)
      runAfter:
        - apply-manifests
